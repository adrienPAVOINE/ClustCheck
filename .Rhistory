for (j in 1:nco){
plg = eff[i,j]/eff[i,nco+1] #number of sample in the i cluster and the j modality (of the other variable) / number of total sample in the i cluster
#creation of a i*j matrix : matrix to cross all the cluster group by all the modes -> use to calculate the pla (proportion in the others groups)
liste <- c(eff[i,j],(eff[nli+1,j]-eff[i,j]), (eff[i,nco+1]-eff[i,j]),eff[nli+1,nco+1]-(eff[i,j]+(eff[nli+1]-eff[i,j])+(eff[i,nco+1]-eff[i,j])) )
matri <- matrix(liste,2,2)
#for all the group*modalitiy we calcule the Khi2
suppressWarnings(khi2 <- chisq.test(matri)) #remove the warnings wich tell us that n is to small
pla = (matri[2,1])/(matri[2,1]+matri[2,2]) #pla calculate for all the group*modes (important to see the proportion of the modality in the others cluster group)
tab_phi[i,j] <- round(sign(plg-pla) * sqrt(khi2$statistic/eff[nli+1,nco+1]),4) #get all the phi values in one table
#get the signed phi value with (plg-pla)
}
}
#print(tab_phi)
return(tab_phi)
}
else {
cat("Error : Phi values cannot be calculated on numerical variables.")
}
}
phivalue(obj, data$profession)
vcramer(obj, data$profession)
#' @param object An object of class ccdata
#' @param var A data vector of an active categorical variable
#'
#' @return A cross table between the cluster variable and the selected variable with phi values for all cluster*mode pairs.
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
#' data(BankCustomer)
#' obj <- Dataset(BankCustomer, BankCustomer$Cluster)
#' phivalue(obj, BankCustomer$profession)
phivalue <- function(object, var) {
if (object$vartype == "NUM" | object$vartype == "MIX") {
if (is.factor(var) == TRUE | is.character(var) == TRUE) {
table <-
contingency(object, var) #call the CalcTable to get cross table between the two variables
tableau <- table[[1]]
nli <- table[[5]]
nco <-
table[[4]] #we get all the information (effective table, nli, nco and the line percentage)
eff = table[[2]]
pourc = table[[3]]
tab_phi <-
tableau #creation of the same table where we will put the news informations
for (i in 1:nli) {
for (j in 1:nco) {
plg = eff[i, j] / eff[i, nco + 1] #number of sample in the i cluster and the j modality (of the other variable) / number of total sample in the i cluster
#creation of a i*j matrix : matrix to cross all the cluster group by all the modes -> use to calculate the pla (proportion in the others groups)
liste <-
c(eff[i, j], (eff[nli + 1, j] - eff[i, j]), (eff[i, nco + 1] - eff[i, j]), eff[nli +
1, nco + 1] - (eff[i, j] + (eff[nli + 1] - eff[i, j]) + (eff[i, nco + 1] -
eff[i, j])))
matri <- matrix(liste, 2, 2)
#for all the group*modalitiy we calcule the Khi2
suppressWarnings(khi2 <-
chisq.test(matri)) #remove the warnings wich tell us that n is to small
pla = (matri[2, 1]) / (matri[2, 1] + matri[2, 2]) #pla calculate for all the group*modes (important to see the proportion of the modality in the others cluster group)
tab_phi[i, j] <-
round(sign(plg - pla) * sqrt(khi2$statistic / eff[nli + 1, nco + 1]), 4) #get all the phi values in one table
#get the signed phi value with (plg-pla)
}
}
return(tab_phi)
} else{
stop("Error : var must be a categorical variable")
}
} else {
stop("Error : There are no categorical variable in your dataset.")
}
}
phivalue(obj, data$profession)
#' @param object an object of class ccdata
#'
#' @return A matrix of correlations. Each column value represents the square of the correlation ratio η² for each variable (individually) with the feature variable (the entered clustering).
#' η² corresponds to the proportion of the variance explained.
#'
#' @examples
#' data(BankCustomer)
#' obj <- Dataset(BankCustomer, BankCustomer$Cluster)
#' corr_ratios(obj)
#' @export
corr_ratios <- function(object) {
if (object$vartype == "CAT") {
stop("Error : Correlations ratios can only be calculated on numerical variables.")
}
classes <- object$pred_clusters
cl <- object$cluster_names
n_clusters <- length(cl)
#SCT------------
sct_f <- function(x) {
m <- mean(x)
sct <- 0
for (i in 1:length(x)) {
#check if x or data
sct <- (x[i] - m) ** 2 + sct
}
return(sct)
}
sct_l <- sapply(object$num_data, sct_f)
#SCE-----------
sce_f <- function(x) {
m <- mean(x)
sce <- 0
for (i in cl) {
ind_g <- which(classes == i)
ng <- length(ind_g)
sce <- sce + (ng * (mean(x[ind_g]) - m) ** 2)
}
return(sce)
}
sce_l <- sapply(object$num_data, sce_f)
#SCR------------
scr_f <- function(x) {
m <- mean(x)
scr <- 0
for (i in cl) {
ind_g <- which(classes == i)
ng <- length(ind_g)
for (j in ind_g) {
scr <- scr + (x[j] - mean(x[ind_g])) ** 2
}
}
return(scr)
}
scr_l <- sapply(object$num_data, scr_f)
corr <- sce_l / sct_l
#print("Correlation matrix")
#print(corr)
return(corr)
}
corr_ratios(obj)
#'
#' @return A new dataset for the metrics function, created with the new coordinates based on a FAMD.
#' @export
#' @import FactoMineR
#' @import factoextra
#'
#' @examples
#' data(BankCustomer)
#' obj <- Dataset(BankCustomer, BankCustomer$Cluster)
#' transformdata(obj)
transformdata <- function(object){
if(object$vartype=="NUM"){
stop("Error : the variables are numerical and don't need factorial transformation")
}
res.famd <- FactoMineR::FAMD(object$active_data, graph = FALSE)
ind <- factoextra::get_famd_ind(res.famd)
return(as.data.frame(ind$coord))
}
transformdata(obj)
#'
#' @return plot of the tests value for all numerical variables and all clusters or plot of tests values by modes of a selected categorical variable for all clusters.
#'
#' @export
#' @import ggplot2
#' @examples
#' data(BankCustomer)
#' obj <- Dataset(BankCustomer, BankCustomer$Cluster)
#' plottvalue(obj) #for all the numerical variables
#' plottvalue(obj, BankCustomer$profession) #for only one categorical variable
plottvalue <- function(object, var = NULL) {
if(object$vartype== "NUM"){
table <- tvalue_num(object)
p <- ncol(table)
variables <- rownames(table)
Tvalue_table <- stack(as.data.frame(table))
Tvalue_table$variables <- rep(variables, p)
# Visualisation
plot <-ggplot2::ggplot(Tvalue_table, aes(x = variables, y = values)) +
geom_col() +
geom_hline(
yintercept = -2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
geom_hline(
yintercept = 2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
coord_flip() +
facet_wrap(vars(ind)) +
labs(title = "t-values")
print(plot)
}
if(object$vartype== "CAT"){
if (is.null(var) == FALSE) {
if (is.character(var) == TRUE | is.factor(var) == TRUE) {
table <- tvalue_cat(object, var)
m <- ncol(table)
levels <- colnames(table)
Tvalue_table <- as.data.frame(table)
Tvalue_table$Freq
colnames(Tvalue_table) <- c('clusters', 'levels', 'values')
# Visualisation
ggplot2::ggplot(Tvalue_table, aes(x = levels, y = values)) +
geom_col() +
coord_flip() +
facet_wrap(vars(clusters)) +
labs(title = "t-values")
}
}
}
}
plottvalue(obj)
#'
#' @return plot of the tests value for all numerical variables and all clusters or plot of tests values by modes of a selected categorical variable for all clusters.
#'
#' @export
#' @import ggplot2
#' @examples
#' data(BankCustomer)
#' obj <- Dataset(BankCustomer, BankCustomer$Cluster)
#' plottvalue(obj) #for all the numerical variables
#' plottvalue(obj, BankCustomer$profession) #for only one categorical variable
plottvalue <- function(object, var = NULL) {
if(object$vartype== "NUM" | object$vartype =="MIX"){
table <- tvalue_num(object)
p <- ncol(table)
variables <- rownames(table)
Tvalue_table <- stack(as.data.frame(table))
Tvalue_table$variables <- rep(variables, p)
# Visualisation
plot <-ggplot2::ggplot(Tvalue_table, aes(x = variables, y = values)) +
geom_col() +
geom_hline(
yintercept = -2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
geom_hline(
yintercept = 2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
coord_flip() +
facet_wrap(vars(ind)) +
labs(title = "t-values")
print(plot)
}
if(object$vartype== "CAT" | object$vartype=="MIX"){
if (is.null(var) == FALSE) {
if (is.character(var) == TRUE | is.factor(var) == TRUE) {
table <- tvalue_cat(object, var)
m <- ncol(table)
levels <- colnames(table)
Tvalue_table <- as.data.frame(table)
Tvalue_table$Freq
colnames(Tvalue_table) <- c('clusters', 'levels', 'values')
# Visualisation
ggplot2::ggplot(Tvalue_table, aes(x = levels, y = values)) +
geom_col() +
coord_flip() +
facet_wrap(vars(clusters)) +
labs(title = "t-values")
}
}
}
}
plottvalue(obj)
library(ClustCheck)
ClustCheck::plottvalue(obj)
ClustCheck::plottvalue(obj, data$profession)
ClustCheck::plotVCramer(obj)
ClustCheck::silhouetteC(obj)
ClustCheck::validation(obj, data$Cluster)
corr_ratios(obj)
ClustCheck::effectsize(obj)
ClustCheck::get_PCA(obj)
ClustCheck::get_MCA(obj)
ClustCheck::get_FAMD(obj)
help("vizAFC")
?ClustCheck
help(ClustCheck)
??ClustCheck
data("BankCustomer")
ClustCheck::vcramer(obj)
library(ClustCheck)
ClustCheck::Dataset(data, data$Cluster)
library(ClustCheck)
library(ClustCheck)
ClustCheck::Dataset(data, data$Cluster)
library(ClustCheck)
data <- read.csv("C:/Users/adrien/Documents/Test_data/seeds.csv")
data <- read.csv("C:/Users/adrien/Documents/Test_data/seeds.csv", sep=",")
data <- read.csv("C:/Users/adrien/Documents/Test_data/seeds.csv", sep=";")
data
data <- read.csv("C:/Users/adrien/Documents/Test_data/seeds.csv", sep=",", dec=",")
data <- read.csv("C:/Users/adrien/Documents/Test_data/seeds.csv", sep=";")
data
data <- read.csv("C:/Users/adrien/Documents/Test_data/seeds.csv", sep=";", dec=",")
data
ob <- ClustCheck::Dataset(data, data$wheat)
ob <- ClustCheck::Dataset(data, data$wheat, data$ajout)
ClustCheck::validation(obj)
#' @param true_clusters Vector of the true clusters (true clusters with ccdata class object by default)
#'
#'
#' @return Confusion matrix, error rate, recall and precision. A matrix of recall and precision for all the cluster groups.
#' @export
#'
#' @examples
#' data(BankCustomer)
#' obj <- Dataset(BankCustomer, BankCustomer$Cluster)
#' validation(obj, BankCustomer$Cluster)
validation <- function(object, true_clusters = object$true_clusters) {
print(true_clusters)
if (is.null(true_clusters) == FALSE) {
table <- contingency(object, true_clusters)
tab <- table[[1]]
ConfMat <- table[[2]]
nli <- table[[5]]
nco <- table[[4]]
n <- object$n
if (nli != nco) {
stop("Error : you don't have the same numbers of clusters between predicted and true values")
} else{
if (nli == 2) {
Errorrate <- 1 - ((ConfMat[1, 2] + ConfMat[2, 1]) / n)
Recall <- ConfMat[1, 1] / (ConfMat[1, 3])
Precision <- ConfMat[1, 1] / ConfMat[3, 1]
matrix = matrix(
Errorrate,
Recall,
Precision,
nrow = 3,
ncol = 1,
dimnames = list(c(
"Errorrate", "Recall", "Precision"
), c("Valeurs"))
)
print(matrix)
} else if (nli > 2) {
print(ConfMat)
Errorrate <- 1 - ((sum(diag(tab))) / n)
cat("Error Rate :", Errorrate, "\n")
for (i in 1:nli) {
group <- object$cluster_names[i]
cat("cluster:", group, "\n")
Recall <- ConfMat[i, i] / ConfMat[i, nli + 1]
Precision <- ConfMat[i, i] / ConfMat[nli + 1, i]
matrix = matrix(
c(Recall, Precision),
nrow = 2,
ncol = 1,
dimnames = list(c("Recall", "Precision"), c("Valeurs"))
)
print(matrix)
}
}
}
} else{
stop("Error : you didn't enter a true cluster vector")
}
}
validation(ob)
ClustCheck::validation(ob)
silhouetteC(ob)
ClustCheck::vcramer(ob)
library(ClustCheck)
ob <- ClustCheck::Dataset(data, data$wheat, data$ajout)
ClustCheck::vcramer(ob)
library(ClustCheck)
ob <- ClustCheck::Dataset(data, data$wheat, data$ajout)
ClustCheck::vcramer(ob)
ClustCheck::contingency(ob,data$length)
ClustCheck::get_FAMD(ob)
ClustCheck::phivalue(ob)
ClustCheck::phivalue(ob, data$wheat)
library(ClustCheck)
ob <- ClustCheck::Dataset(data, data$wheat, data$ajout)
ClustCheck::phivalue(ob, data$wheat)
ClustCheck::get_FAMD(ob)
ClustCheck::contingency(ob,data$length)
ClustCheck::vcramer(ob)
data <- ClustCheck::BankCustomer
obje <- ClustCheck::Dataset(data, data$Cluster)
ClustCheck::vcramer(ob)
ClustCheck::vcramer(obje)
ClustCheck::effectsize(obje)
ClustCheck::effectsize(ob)
ClustCheck::plotVCramer(obje)
ClustCheck::plotVCramer(ob)
ClustCheck::plottvalue(obje)
ClustCheck::plottvalue(ob)
??FactoMineR
??ClustCheck
help("phivalue")
help(Clustering check and interpretation)
help("Clustering check and interpretation")
??Clustering check and interpretation
?ClustCheck
??ClustCheck
??clValid
??clValid
library(ClustCheck)
```
library(ClustCheck)
print("test")
---
output:
pdf_document: default
html_document: default
---
library(ClustCheck)
```{r mt-plot}
library(ggplot2)
ggplot(mtcars, aes(y = mpg, x = wt, size = hp)) + geom_point() + stat_smooth(method = "lm", se = FALSE)
```
---
output:
pdf_document: default
html_document: default
---
library(ClustCheck)
```{r mt-plot}
library(ggplot2)
ggplot(mtcars, aes(y = mpg, x = wt, size = hp)) + geom_point() + stat_smooth(method = "lm", se = FALSE)
```
devtools::document()
rm(list = c("corr_ratios", "data", "phivalue", "plottvalue", "transformdata", "validation", "vcramer"))
devtools::document()
devtools::document()
help(phivalue)
help(package = "ClustCheck")
library(ClustCheck)
build_manual(clustCheck)
devtools:build_manual("ClustCheck")
devtools::build_manual("ClustCheck")
devtools::build_manual()
devtools::build_manual()
tools::texi2pdf()
install.packages("LaTex")
tinytex::install_tinytex()
devtools::build_manual()
tools::texi2pdf()
install.packages("pdflatex")
devtools::build_manual()
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
devtools::build_manual()
devtools::build_manual()
install.packages("pdflatex")
help(build_manual)
devtools::build_manual(pkg = ".", path = NULL)
knit2pdf("yourscript.Rnw", output = "yourscript.tex")
library("ClustCheck")
setwd("~/some_directory")
knit2pdf("yourscript.Rnw", output = "yourscript.tex")
setwd("C:/Users/adrien/Documents/")
knit2pdf("yourscript.Rnw", output = "yourscript.tex")
knit2pdf("ClustCheck.Rproj", output = "yourscript.tex")
install.packages("knit2pdf")
devtools::knit2pdf("ClustCheck.Rproj", output = "yourscript.tex")
install.packages("knitr ")
install.packages("knitr")
devtools::knit2pdf("ClustCheck.Rproj", output = "yourscript.tex")
knit2pdf("ClustCheck.Rproj", output = "yourscript.tex")
library(knitr)
knit2pdf()
knit2pdf("ClustCheck.Rproj", output = "yourscript.tex")
devtools::build_manual(pkg = ".", path = NULL)
devtools::build_manual(pkg = "ClustCheck", path = NULL)
libray(pdflatex)
library(pdflatex)
install.packages("pdflatex")
install.packages("tinytex")
install.packages("tinytex")
library(ClustCheck)
ClustCheck::plottvalue(obj)
obj <- ClustCheck::Dataset(data("BankCustomer"), BankCustomer$Cluster)
data("BankCustomer")
BankCustomer
obj <- ClustCheck::Dataset(BankCustomer, BankCustomer$Cluster)
ClustCheck::plottvalue(obj)
library(ClustCheck)
data("BankCustomer")
obj <- ClustCheck::Dataset(BankCustomer,BankCustomer$Cluster)
ClustCheck::plottvalue(obj)
ClustCheck::plottvalue(obj, BankCustomer$profession)
ClustCheck::plotVCramer(obj)
ClustCheck::vizAFC(obj, BankCustomer$profession)
library(ClustCheck)
ClustCheck::get_FAMD(obj)
deparse(substitute(BankCustomer$revenu))
name <- deparse(substitute(BankCustomer$revenu))
strsplit(name,"$")
strsplit(name,$)
strsplit(name,"e")
strsplit(name,"$")
strsplit(name,split='$')
strsplit(name,split='$')[,2]
strsplit(name,split='$')[,1]
strsplit(name,split='$', fixed = TRUE)
strsplit(name,split='$', fixed = TRUE)[,2]
strsplit(name,split='$', fixed = TRUE)[,1]
strsplit(name,split='$', fixed = TRUE)[1]
strsplit(name,split='$', fixed = TRUE)[2]
strsplit(name,split='$', fixed = TRUE)[[1]]
strsplit(name,split='$', fixed = TRUE)[[1]][2]
library(ClustCheck)
ClustCheck::statistical_test(obj, BankCustomer$profession)
ClustCheck::statistical_test(obj, BankCustomer$revenu)
R CMD Rd2pdf <Package directory>
devtools::build_manual("ClustCheck")
devtools::build_manual()
devtools::check(manual=TRUE)
devtools::build_manual()
