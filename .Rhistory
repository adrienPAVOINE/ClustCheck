}
Vcramer.FactorDataset(obj)
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
print(rownames(matrice[which.max(matrice)]))
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
print(rownames(matrice[which.max(matrice[,1])]))
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
matrice[which.max(matrice[,1])]
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
print(head(sort(matrice[,1], decreasing = TRUE), 3))
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
matrice[which.max(matrice[,1])]
Vcramer.FactorDataset(obj)
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
rownames(head(sort(matrice[,1], decreasing = TRUE), 3))
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
rownames(matrice)[head(sort(matrice[,1], decreasing = TRUE), 3)]
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
typeof(head(sort(matrice[,1], decreasing = TRUE), 3))
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
print(rownames(matrice(which(head(sort(matrice[,1], decreasing = TRUE), 3)))))
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
ind = head(sort(matrice[,1], decreasing = TRUE), 3)
rownames(matrice)[ind]
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
ind = head(sort(matrice[,1], decreasing = TRUE), 3)
print(ind)
rownames(matrice)[ind]
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
#' @examples
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
ind = head(sort(matrice[,1], decreasing = TRUE), 3)
print(ind[1,])
rownames(matrice)[ind]
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
ind = head(sort(matrice[,1], decreasing = TRUE), 3)
print(ind$rownames)
rownames(matrice)[ind]
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
library(ClustCheck)
data <- read.csv("C:/Users/adrien/Documents/Test_data/BankCustomer.csv",sep=";", dec=",")
obj <- ClustCheck::FactoDataset(data, "Cluster")
PhiValueTable.FactorDataset(obj,"profession")
#' @examples
#' Vcramer.FactorDataset
#'
#' @param object a object
#' @param var if you just want the Cramer for one varible
#'
#' @return
#' @export
#'
#' @examples
Vcramer.FactorDataset <- function(object, var = FALSE){
if(var == FALSE){
l<-c()
for (i in object$var.qual.names){
tableau <- table(object$data[[i]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
l <- c(l,cramer)
}
matrice = matrix(l,nrow=object$p.qual,ncol=1, dimnames = list(colnames(object$data.qual),"Cramer"))
print(matrice)
listemax <- c()
ind = head(sort(matrice[,1], decreasing = TRUE), 3)
listemax <- c(listemax, ind)
print(listemax)
#rownames(matrice)[ind]
}else{
tableau <- table(object$data[[var]],object$data[[object$vargroupe]])
nli <- nrow(tableau)
nco <- ncol(tableau)
khi2 = chisq.test(tableau)$statistic
cramer = sqrt((khi2)/(nrow(object$data)*(min((nco-1),(nli-1)))))
cat("cramer entre la var groupe et ", var," = ", cramer)
}
}
Vcramer.FactorDataset(obj)
usethis::use_package("ggplot2")
#' plot.t
#'
#' @param tvalue a Table of test value
#'
#' @return
#' @export
#' @import ggplot2
#' @examples
plot.t <- function(tvalue){
# t values table needs a particular format for the function to operation
# i.e. 3 columns with variable (variable), t-value (t), cluster name (group)
ggplot(tvalue, aes(x=variable, y=t)) +
geom_col() +
geom_hline(yintercept = -2, linetype="dashed", size=0.5, color="red") +
geom_hline(yintercept = 2, linetype="dashed", size=0.5, color="red") +
coord_flip() +
facet_wrap(vars(group))
}
#' plot.t
#'
#' @param tvalue a Table of test value
#'
#' @return
#' @export
#' @import ggplot2
#' @examples
plot.t <- function(tvalue){
# t values table needs a particular format for the function to operation
# i.e. 3 columns with variable (variable), t-value (t), cluster name (group)
ggplot(tvalue, aes(x=variable, y=t)) +
geom_col() +
geom_hline(yintercept = -2, linetype="dashed", size=0.5, color="red") +
geom_hline(yintercept = 2, linetype="dashed", size=0.5, color="red") +
coord_flip() +
facet_wrap(vars(group))
}
plot.t(c(40,50))
#' plot.t
#'
#' @param tvalue a Table of test value
#'
#' @return
#' @export
#' @import ggplot2 ggplot
#' @examples
plot.t <- function(tvalue){
# t values table needs a particular format for the function to operation
# i.e. 3 columns with variable (variable), t-value (t), cluster name (group)
ggplot(tvalue, aes(x=variable, y=t)) +
geom_col() +
geom_hline(yintercept = -2, linetype="dashed", size=0.5, color="red") +
geom_hline(yintercept = 2, linetype="dashed", size=0.5, color="red") +
coord_flip() +
facet_wrap(vars(group))
}
plot.t(c(40,50))
#' plot.t
#'
#' @param tvalue a Table of test value
#'
#' @return
#' @export
#' @import ggplot
#' @examples
plot.t <- function(tvalue){
# t values table needs a particular format for the function to operation
# i.e. 3 columns with variable (variable), t-value (t), cluster name (group)
ggplot(tvalue, aes(x=variable, y=t)) +
geom_col() +
geom_hline(yintercept = -2, linetype="dashed", size=0.5, color="red") +
geom_hline(yintercept = 2, linetype="dashed", size=0.5, color="red") +
coord_flip() +
facet_wrap(vars(group))
}
plot.t(c(40,50))
#' plot.t
#'
#' @param tvalue a Table of test value
#'
#' @return
#' @export
#' @import ggplot2
#' @examples
plot.t <- function(tvalue){
# t values table needs a particular format for the function to operation
# i.e. 3 columns with variable (variable), t-value (t), cluster name (group)
ggplot2::ggplot(tvalue, aes(x=variable, y=t)) +
geom_col() +
geom_hline(yintercept = -2, linetype="dashed", size=0.5, color="red") +
geom_hline(yintercept = 2, linetype="dashed", size=0.5, color="red") +
coord_flip() +
facet_wrap(vars(group))
}
plot.t(c(40,50))
