autos.pour.acp <- cbind(autos.cont,autos.disc.pond)
rownames(autos.pour.acp) <- rownames(data)
print(round(autos.pour.acp,3))
library(ClustCheck)
obj <- ClustCheck::FactorDataset(data,"Cluster")
ClustCheck::Vcramer.FactorDataset(obj)
ClustCheck::Vcramer.FactorDataset(obj, "profession")
plotVCramer(obj)
plotphi(obj,"Cluster")
plotphi(obj,"profession")
CalcTable.Data <- function(object,vargroupe, varqual){
CalcTable.Data <- function(object,vargroupe, varqual){
}
l
aez
CalcTable.Data <- function(object,vargroupe, varqual){
*
CalcTable.Data <- function(object,vargroupe, varqual){
h
}
CalcTable.Data <- function(object,vargroupe, varqual){
tableau <- table(object$data[[object$vargroupe]],object$data[[varqual]])
nli <- nrow(tableau)
nco <- ncol(tableau)
eff <- addmargins(tableau)
pourc <- addmargins(prop.table(addmargins(tableau,1),1),2)
return(list(tableau, eff, pourc, nco, nli))
}
CalcTable.Data(obj,"profession")
CalcTable.Data <- function(object, varqual){
}
#'
#' @return a Factordataset object
#' @export
#' @importFrom grDevices rainbow
#' @importFrom stats dist reshape
#' @import questionr
#' @import FactoMineR
#' @import factoextra
#' @import ggplot2
#' @examples
Dataset <- function(data,vargroupe){
instance <- list()
instance$vargroupe = vargroupe
instance$data <- data
instance$p <- ncol(data)
instance$n <- nrow(data)
instance$clusters_data <- data[[vargroupe]]
clus_names<- unique(data[[vargroupe]])
#controle - data.frame
ok <- is.data.frame(data)
if (!ok){
stop("Ce n'est pas un data frame")
}
ind.qual = sapply(data,function(x)is.factor(x)|is.character(x))
data.qual1 <- data[ ,ind.qual]
nb_ok <- sum(ind.qual)
if (nb_ok <= 1 ){
print("vous n'avez pas de variables qualitatives autre que  dans votre dataset")
}else{
data.qual <- data.qual1[ , !(names(data.qual1) %in% vargroupe)]
instance$p.qual <- ncol(data.qual)
instance$all.var.qual <- data.qual1
instance$var.qual.names <- names(data.qual)
instance$data.qual = data.qual
instance$vcramer <- Vcramer.Data(instance)
}
ind.quanti = sapply(data,function(x)is.numeric(x))
nb_quanti <- sum(ind.quanti)
if (nb_quanti < 1 ){
print("There are no quantitative variables in your dataset")
}else{
data.quanti<- data[ ,ind.quanti]
instance$data.quanti <- data.quanti
instance$p.quanti <- ncol(data.quanti)
instance$var.quanti.names <- names(data.quanti)
instance$corr.ratio <- Corr_ratios.Data(instance)
}
instance$cluster_names <- clus_names
class(instance) <- "Data"
return(instance)
}
data <- read.csv("C:/Users/adrien/Documents/Test_data/BankCustomer.csv", sep=";", dec=",")
data
obj <- ClustCheck::Dataset(data, "Cluster")
obj <- Dataset(data, "Cluster")
library(ClustCheck)
data <- read.csv("C:/Users/adrien/Documents/Test_data/BankCustomer.csv", sep=";", dec=",")
obj <- ClustCheck::Dataset(data, "Cluster")
ClustCheck::CalcTable.Data(obj, "profession")
obj$data
library(ClustCheck)
data <- read.csv("C:/Users/adrien/Documents/Test_data/BankCustomer.csv", sep=";", dec=",")
obj <- ClustCheck::Dataset(data, "Cluster")
ClustCheck::CalcTable.Data(obj, "profession")
table <- ClustCheck::CalcTable.Data(obj, "profession")
table[[7]]
table[[4]]
table[[tableau]]
table[["tableau]]
""
p=
*
}
ez"fz"
table[["tableau"]]
table["tableau"]
table
table[[1]]
library(ClustCheck)
data <- read.csv("C:/Users/adrien/Documents/Test_data/BankCustomer.csv", sep=";", dec=",")
obj <- ClustCheck::Dataset(data, "Cluster")
PhiValueTable.FactorDataset(obj,"profession")
#' PhiValueTable.Data
#'
#' @param object a object
#' @param nomvarqual a string
#'
#' @return
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
PhiValueTable.Data <- function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
tableau <- table[[1]]
nli <- table[[5]]
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_phi <- tableau
for (i in 1:nli){
for (j in 1:nco){
taille = eff[i,j]/eff[i,nco+1]
liste <- c(eff[i,j],(eff[nli+1,j]-eff[i,j]), (eff[i,nco+1]-eff[i,j]),eff[nli+1,nco+1]-(eff[i,j]+(eff[nli+1]-eff[i,j])+(eff[i,nco+1]-eff[i,j])) )
matri <- matrix(liste,2,2)
khi2 <- chisq.test(matri)
pla = (matri[2,1])/(matri[2,1]+matri[2,2])
tab_phi[i,j] <- round(sign(taille-pla) * sqrt(khi2$statistic/eff[nli+1,nco+1]),4)
}
}
#print(tab_phi)
return(tab_phi)
}
PhiValueTable.FactorDataset(obj,"profession")
#' PhiValueTable.Data
#'
#' @param object a object
#' @param nomvarqual a string
#'
#' @return
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
PhiValueTable.Data <- function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
tableau <- table[[1]]
nli <- table[[5]]
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_phi <- tableau
for (i in 1:nli){
for (j in 1:nco){
taille = eff[i,j]/eff[i,nco+1]
liste <- c(eff[i,j],(eff[nli+1,j]-eff[i,j]), (eff[i,nco+1]-eff[i,j]),eff[nli+1,nco+1]-(eff[i,j]+(eff[nli+1]-eff[i,j])+(eff[i,nco+1]-eff[i,j])) )
matri <- matrix(liste,2,2)
khi2 <- suppressWarnings(chisq.test(matri))
pla = (matri[2,1])/(matri[2,1]+matri[2,2])
tab_phi[i,j] <- round(sign(taille-pla) * sqrt(khi2$statistic/eff[nli+1,nco+1]),4)
}
}
#print(tab_phi)
return(tab_phi)
}
PhiValueTable.FactorDataset(obj,"profession")
khi2 <- suppressWarnings(chisq.test(matri))
table <- CalcTable.Data(object, nomvarqual)
khi2 <- suppressWarnings(chisq.test(matri))
PhiValueTable.FactorDataset(obj,"profession")
#' PhiValueTable.Data
#'
#' @param object a object
#' @param nomvarqual a string
#'
#' @return
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
PhiValueTable.Data <- function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
tableau <- table[[1]]
nli <- table[[5]]
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_phi <- tableau
for (i in 1:nli){
for (j in 1:nco){
taille = eff[i,j]/eff[i,nco+1]
liste <- c(eff[i,j],(eff[nli+1,j]-eff[i,j]), (eff[i,nco+1]-eff[i,j]),eff[nli+1,nco+1]-(eff[i,j]+(eff[nli+1]-eff[i,j])+(eff[i,nco+1]-eff[i,j])) )
matri <- matrix(liste,2,2)
suppressWarnings(khi2 <- chisq.test(matri))
pla = (matri[2,1])/(matri[2,1]+matri[2,2])
tab_phi[i,j] <- round(sign(taille-pla) * sqrt(khi2$statistic/eff[nli+1,nco+1]),4)
}
}
#print(tab_phi)
return(tab_phi)
}
PhiValueTable.Data(obj,"profession")
#' PhiValueTable.Data
#'
#' @param object a object
#' @param nomvarqual a string
#'
#' @return
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
PhiValueTable.Data <- function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
tableau <- table[[1]]
nli <- table[[5]]
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_phi <- tableau
for (i in 1:nli){
for (j in 1:nco){
taille = eff[i,j]/eff[i,nco+1]
liste <- c(eff[i,j],(eff[nli+1,j]-eff[i,j]), (eff[i,nco+1]-eff[i,j]),eff[nli+1,nco+1]-(eff[i,j]+(eff[nli+1]-eff[i,j])+(eff[i,nco+1]-eff[i,j])) )
matri <- matrix(liste,2,2)
khi2 <- chisq.test(matri)
pla = (matri[2,1])/(matri[2,1]+matri[2,2])
tab_phi[i,j] <- round(sign(taille-pla) * sqrt(khi2$statistic/eff[nli+1,nco+1]),4)
}
}
#print(tab_phi)
return(tab_phi)
}
PhiValueTable.Data(obj,"profession")
#' @examples
#' PhiValueTable.Data
#'
#' @param object a object
#' @param nomvarqual a string
#'
#' @return
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
PhiValueTable.Data <- function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
tableau <- table[[1]]
nli <- table[[5]]
print(nli)
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_phi <- tableau
for (i in 1:nli){
for (j in 1:nco){
taille = eff[i,j]/eff[i,nco+1]
liste <- c(eff[i,j],(eff[nli+1,j]-eff[i,j]), (eff[i,nco+1]-eff[i,j]),eff[nli+1,nco+1]-(eff[i,j]+(eff[nli+1]-eff[i,j])+(eff[i,nco+1]-eff[i,j])) )
matri <- matrix(liste,2,2)
suppressWarnings(khi2 <- chisq.test(matri))
pla = (matri[2,1])/(matri[2,1]+matri[2,2])
tab_phi[i,j] <- round(sign(taille-pla) * sqrt(khi2$statistic/eff[nli+1,nco+1]),4)
}
}
#print(tab_phi)
return(tab_phi)
}
PhiValueTable.Data(obj,"profession")
#' PhiValueTable.Data
#'
#' @param object a object
#' @param nomvarqual a string
#'
#' @return
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
PhiValueTable.Data <- function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
print(table)
tableau <- table[[1]]
nli <- table[[5]]
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_phi <- tableau
for (i in 1:nli){
for (j in 1:nco){
taille = eff[i,j]/eff[i,nco+1]
liste <- c(eff[i,j],(eff[nli+1,j]-eff[i,j]), (eff[i,nco+1]-eff[i,j]),eff[nli+1,nco+1]-(eff[i,j]+(eff[nli+1]-eff[i,j])+(eff[i,nco+1]-eff[i,j])) )
matri <- matrix(liste,2,2)
suppressWarnings(khi2 <- chisq.test(matri))
pla = (matri[2,1])/(matri[2,1]+matri[2,2])
tab_phi[i,j] <- round(sign(taille-pla) * sqrt(khi2$statistic/eff[nli+1,nco+1]),4)
}
}
#print(tab_phi)
return(tab_phi)
}
PhiValueTable.Data(obj,"profession")
obj
CalcTable.Data(obj,"professio")
CalcTable.Data(obj,"profession")
CalcTable.Data(obj,profession)
CalcTable.Data(obj,"profession")
#' CalcTable.Data
#'
#' @param object a object
#' @param varqual the other variable to cross
#'
#' @return
#' @export
#' @importFrom stats addmargins
#' @examples
CalcTable.Data <- function(object, varqual){
tableau <- table(object$data[[object$vargroupe]],object$data[[varqual]])
nli <- nrow(tableau)
nco <- ncol(tableau)
eff <- addmargins(tableau)
pourc <- addmargins(prop.table(addmargins(tableau,1),1),2)
return(list(tableau, eff, pourc, nco, nli))
}
CalcTable.Data(obj,"profession")
#' PhiValueTable.Data
#'
#' @param object a object
#' @param nomvarqual a string
#'
#' @return
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
PhiValueTable.Data <- function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
print(table)
tableau <- table[[1]]
nli <- table[[5]]
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_phi <- tableau
for (i in 1:nli){
for (j in 1:nco){
taille = eff[i,j]/eff[i,nco+1]
liste <- c(eff[i,j],(eff[nli+1,j]-eff[i,j]), (eff[i,nco+1]-eff[i,j]),eff[nli+1,nco+1]-(eff[i,j]+(eff[nli+1]-eff[i,j])+(eff[i,nco+1]-eff[i,j])) )
matri <- matrix(liste,2,2)
suppressWarnings(khi2 <- chisq.test(matri))
pla = (matri[2,1])/(matri[2,1]+matri[2,2])
tab_phi[i,j] <- round(sign(taille-pla) * sqrt(khi2$statistic/eff[nli+1,nco+1]),4)
}
}
#print(tab_phi)
return(tab_phi)
}
PhiValueTable.Data(obj,"profession")
#' PhiValueTable.Data
#'
#' @param object a object
#' @param nomvarqual a string
#'
#' @return
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
PhiValueTable.Data <- function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
tableau <- table[[1]]
nli <- table[[5]]
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_phi <- tableau
for (i in 1:nli){
for (j in 1:nco){
taille = eff[i,j]/eff[i,nco+1]
liste <- c(eff[i,j],(eff[nli+1,j]-eff[i,j]), (eff[i,nco+1]-eff[i,j]),eff[nli+1,nco+1]-(eff[i,j]+(eff[nli+1]-eff[i,j])+(eff[i,nco+1]-eff[i,j])) )
matri <- matrix(liste,2,2)
suppressWarnings(khi2 <- chisq.test(matri))
pla = (matri[2,1])/(matri[2,1]+matri[2,2])
tab_phi[i,j] <- round(sign(taille-pla) * sqrt(khi2$statistic/eff[nli+1,nco+1]),4)
}
}
#print(tab_phi)
return(tab_phi)
}
PhiValueTable.Data(obj,"profession")
library(ClustCheck)
obj
#' TValueTable.FactorDataset
#'
#' @param object a object
#' @param nomvarqual string name of variable
#'
#' @return
#' @export
#' @importFrom stats addmargins chisq.test
#' @examples
TValueTable.Data <-function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
tableau <- table[[1]]
nli <- table[[5]]
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_vtest <- tableau
for (i in 1:nli){
for (j in 1:nco){
v = (sqrt(eff[nli+1,j]))*((pourc[i,j] - pourc[nli+1,j])/(sqrt(((eff[nli+1,nco+1]-eff[nli+1,j])/(eff[nli+1,nco+1] - 1))*pourc[nli+1,j]* (1-pourc[nli+1,j]))))
tab_vtest[i,j] <- v
}
}
print("ci dessous tableau des valeurs tests")
#print(tab_vtest)
return(tab_vtest)
}
TValueTable.Data(obj,"profession")
#' TValueTable.Data
#'
#' @param object a data object
#' @param nomvarqual string of the variable
#'
#' @return
#' @export
#'
#' @examples
TValueTable.Data <-function(object, nomvarqual){
table <- CalcTable.Data(object, nomvarqual)
tableau <- table[[1]]
nli <- table[[5]]
nco <- table[[4]]
eff = table[[2]]
pourc = table[[3]]
tab_vtest <- tableau
for (i in 1:nli){
for (j in 1:nco){
v = (sqrt(eff[nli+1,j]))*((pourc[i,j] - pourc[nli+1,j])/(sqrt(((eff[nli+1,nco+1]-eff[nli+1,j])/(eff[nli+1,nco+1] - 1))*pourc[nli+1,j]* (1-pourc[nli+1,j]))))
tab_vtest[i,j] <- v
}
}
print("ci dessous tableau des valeurs tests")
#print(tab_vtest)
return(tab_vtest)
}
library(ClustCheck)
data <- read.csv("C:/Users/adrien/Documents/Test_data/BankCustomer.csv", sep=";", dec=",")
obj <- ClustCheck::Dataset(data, "Cluster")
Corr_ratios.Data(obj)
Corr_ratios.Data(obj)
obj <- ClustCheck::Dataset(data, "Cluster")
EffectSizeTable.Data(obj)
#'
#' @return a Factordataset object
#' @export
#' @importFrom grDevices rainbow
#' @importFrom stats dist reshape
#' @import questionr
#' @import FactoMineR
#' @import factoextra
#' @import ggplot2
#' @examples
Dataset <- function(data,vargroupe){
instance <- list()
instance$vargroupe = vargroupe
instance$data <- data
instance$p <- ncol(data)
instance$n <- nrow(data)
instance$clusters_data <- data[[vargroupe]]
clus_names<- unique(data[[vargroupe]])
#controle - data.frame
ok <- is.data.frame(data)
if (!ok){
stop("Ce n'est pas un data frame")
}
ind.qual = sapply(data,function(x)is.factor(x)|is.character(x))
data.qual1 <- data[ ,ind.qual]
nb_ok <- sum(ind.qual)
if (nb_ok <= 1 ){
print("vous n'avez pas de variables qualitatives autre que  dans votre dataset")
}else{
data.qual <- data.qual1[ , !(names(data.qual1) %in% vargroupe)]
instance$p.qual <- ncol(data.qual)
instance$all.var.qual <- data.qual1
instance$var.qual.names <- names(data.qual)
instance$data.qual = data.qual
instance$vcramer <- Vcramer.Data(instance)
}
ind.quanti = sapply(data,function(x)is.numeric(x))
nb_quanti <- sum(ind.quanti)
if (nb_quanti < 1 ){
print("There are no quantitative variables in your dataset")
}else{
data.quanti<- data[ ,ind.quanti]
instance$data.quanti <- data.quanti
instance$p.quanti <- ncol(data.quanti)
instance$var.quanti.names <- names(data.quanti)
instance$corr.ratio <- Corr_ratios.Data(instance)
}
instance$cluster_names <- clus_names
class(instance) <- "Data"
return(instance)
}
obj <- ClustCheck::Dataset(data, "Cluster")
Dataset(data, "Cluster")
library(ClustCheck)
data <- read.csv("C:/Users/adrien/Documents/Test_data/BankCustomer.csv", sep=";", dec=",")
obj <- ClustCheck::Dataset(data, "Cluster")
