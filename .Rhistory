}
}
print("ci dessous tableau des valeurs tests")
print(tab_vtest)
}
TValueTable.UnivFactor(obj)
print.UnivFactor <- function(objet){
#affichage amélioré
cat("nli = ",objet$nli,"\n")
cat("nrow = ",objet$nco,"\n")
cat("test statistic = ",objet$eff,"\n")
cat("p-value = ",objet$pourc,"\n")
}
print(obj)
#' TValueTable
#'
#' @param object
#'
#' @return a matrice
#' @export
#'
#' @examples
#'
TValueTable.UnivFactor <-function(object){
tab_vtest <- table(object$data$vargroupe,object$data$varqual1)
for (i in 1:object$nli){
for (j in 1:object$nco){
v = (sqrt(object$eff[object$nli+1,j]))*((object$pourc[i,j] - object$pourc[object$nli+1,j])/(sqrt(((object$eff[object$nli+1,object$nco+1]-object$eff[object$nli+1,j])/(object$eff[object$nli+1,object$nco+1] - 1))*object$pourc[object$nli+1,j]* (1-object$pourc[object$nli+1,j]))))
tab_vtest[i,j] <- v
}
}
print("ci dessous tableau des valeurs tests")
print(tab_vtest)
}
TValueTable.UnivFactor(obj)
print(obj$varqual1)
print(obj$data)
tab_vtest <- object$tableau
#' TValueTable
#'
#' @param object
#'
#' @return a matrice
#' @export
#'
#' @examples
#'
TValueTable.UnivFactor <-function(object){
tab_vtest <- object$tableau
for (i in 1:object$nli){
for (j in 1:object$nco){
v = (sqrt(object$eff[object$nli+1,j]))*((object$pourc[i,j] - object$pourc[object$nli+1,j])/(sqrt(((object$eff[object$nli+1,object$nco+1]-object$eff[object$nli+1,j])/(object$eff[object$nli+1,object$nco+1] - 1))*object$pourc[object$nli+1,j]* (1-object$pourc[object$nli+1,j]))))
tab_vtest[i,j] <- v
}
}
print("ci dessous tableau des valeurs tests")
print(tab_vtest)
}
TValueTable.UnivFactor(obj)
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
print(obj)
TValueTable.UnivFactor(obj)
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
TValueTable.UnivFactor(obj)
Visualisation.Univfactor(obj)
Visualisation.UnivFactor <-function(object){
#r?alisation des profils ligne et colonne
lprop(object$tableau, digits=1)#la distribution de la r?gion parmis ceux heureux || 4 profils lignes
#ensemnle = profil moyen
cprop(object$tableau, digits=2)
#on s'uppose la d?pendance car les profils sont distincts
# on test l'ind?pendance
chisq = chisq.test(object$tableau)
print(chisq)
#aphiques
colors <- c("chartreuse4", "chartreuse1", "orange","green")
barplot(object$tableau, col=colors, main = "heureux par libert? sur internet", ylab="nombre ")
mosaicplot(object$tableau, col = colors)
res.ca <- CA(object$tableau, graph = TRUE)
}
Visualisation.UnivFactor(obj)
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
Visualisation.UnivFactor(obj)
usethis::use_package("ggplot2")
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
Visualisation.UnivFactor(obj)
#' @return some plot
#' @export
#' @import questionr
#' @import FactoMineR
#' @import factoextra
#' @importFrom graphics  barplot mosaicplot
#' @importFrom stats addmargins chisq.test
#' @import ggplot2
#'
#' @examples
Visualisation.UnivFactor <-function(object){
#r?alisation des profils ligne et colonne
lprop(object$tableau, digits=1)#la distribution de la r?gion parmis ceux heureux || 4 profils lignes
#ensemnle = profil moyen
cprop(object$tableau, digits=2)
#on s'uppose la d?pendance car les profils sont distincts
# on test l'ind?pendance
chisq = chisq.test(object$tableau)
print(chisq)
#aphiques
colors <- c("chartreuse4", "chartreuse1", "orange","green")
barplot(object$tableau, col=colors, main = "heureux par libert? sur internet", ylab="nombre ")
mosaicplot(object$tableau, col = colors)
res.ca <- CA(object$tableau, graph = TRUE)
}
Visualisation.UnivFactor(obj)
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
Visualisation.UnivFactor(obj)
TValueTable.UnivFactor(obj)
Visualisation.UnivFactor(obj)
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
Visualisation.UnivFactor(obj)
obj$tableau
barplot(obj$tableau)
for (i in 1:obj$nco) {
plot(o$data[,i], main = colnames(obj$data)[i],
ylab = "Count", col="steelblue", las = 2)
}
for (i in 1:obj$nco) {
plot(obj$data[,i], main = colnames(obj$data)[i],
ylab = "Count", col="steelblue", las = 2)
}
obj$data[,i]
obj$data
data = obj$data[c(,17:19)]
data
data<- read.table("C:/Users/adrien/Downloads/temperat.csv", sep = ";",header = 1,row.names = 1)
dataqual = data[,17:19]
dataqual = data[,17:18]
dataqual = data[,16:17]
dataq = read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")
dataqual = dataq[,17:19]
for (i in 1:obj$nco) {
plot(dataqual[,i], main = colnames(dataqual)[i],
ylab = "Count", col="steelblue", las = 2)
}
dataqual
for (i in 1:obj$nco) {
plot(dataqual[,i], main = colnames(dataqual)[i],
ylab = "Count", col="steelblue", las = 2)
}
dataqual$Région = as.factor(datqual$région)
dataqual$Région = as.factor(dataqual$région)
dataqual$Région = as.factor(dataqual$Région)
dataqual$vraigroupe = as.factor(dataqual$vraigroupe)
dataqual$groupe = as.factor(dataqual$groupe)
for (i in 1:obj$nco) {
plot(dataqual[,i], main = colnames(dataqual)[i],
ylab = "Count", col="steelblue", las = 2)
}
for (i in 1:obj$nli) {
plot(dataqual[,i], main = colnames(dataqual)[i],
ylab = "Count", col="steelblue", las = 2)
}
for (i in 1:5) {
plot(dataqual[,i], main = colnames(dataqual)[i],
ylab = "Count", col="steelblue", las = 2)
}
for (i in 1:4) {
plot(dataqual[,i], main = colnames(dataqual)[i],
ylab = "Count", col="steelblue", las = 2)
}
for (i in 1:3) {
plot(dataqual[,i], main = colnames(dataqual)[i],
ylab = "Count", col="steelblue", las = 2)
}
barplot(obj$tableau, beside = TRUE, horiz = TRUE,
main = "Horizontal Bar Graph Descending Order",
names.arg = row.names(obj$tableau),
las=1, col = rainbow(nrow(obj$tableau)))
# CONVERT TO DATA FRAME
df <- transform(data.frame(obj$tableau), y=row.names(obj$tableau))
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(obj$tableau), times = colnames(obj$tableau),
timevar="x", v.names="value", direction="long")
df
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(obj$tableau), times = colnames(obj$tableau),timevar="x", v.names="value", direction="long")
colnames(obj$tableau)
ggplot(obj$tableau) +
geom_col(aes(fill = values)) +
scale_fill_gradient2(low = "floralwhite",
high = "dodgerblue4") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
coord_flip()
# CONVERT TO DATA FRAME
df <- transform(data.frame(obj$tableau), y=row.names(obj$tableau))
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(obj$tableau), times = colnames(obj$tableau),
timevar="x", v.names="value", direction="long")
varying = colnames(obj$tableau)
varying
library(dplyr)
library(tidyr)
library(ggplot2)
pivot_longer(data.frame(obj$tableau), cols = everything()) %>%
group_by(name) %>%
mutate(newname = unique(.$name),
newname = paste(pmin(name, newname),
pmax(name, newname), sep = ":")) %>%
ungroup() %>%
select(-name) %>%
distinct() %>%
arrange(value)  %>%
mutate(newname = factor(newname, unique(newname))) %>%
ggplot() + aes(x = newname, y = value, group = value, fill = value) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
theme(axis.title.y = element_text(angle = 0, vjust = 0.5)) +
coord_flip()
# CONVERT TO DATA FRAME
df <- transform(data.frame(obj$tableau), y=row.names(obj$tableau))
# BASE R barplot:
barplot(df, beside = TRUE, horiz = TRUE,
main = "Horizontal Bar Graph Descending Order",
names.arg = row.names(new_mat),
las=1, col = rainbow(nrow(new_mat)))
# BASE R barplot:
barplot(df, beside = TRUE, horiz = TRUE,
main = "Horizontal Bar Graph Descending Order",
names.arg = row.names(obj$tableau),
las=1, col = rainbow(nrow(obj$tableau)))
counts <-obj$tableau
barplot(counts, main="Car Distribution", horiz=TRUE, names.arg=c("3 Gears", "4 Gears", "5   Gears"), cex.names=0.8)
barplot(counts, main="Car Distribution", horiz=TRUE)
# Fitting Labels
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", horiz=TRUE, names.arg=c("3 Gears", "4 Gears", "5   Gears"), cex.names=0.8)
#' TValueTable
#'
#' @param object a UnivFactor object
#'
#' @return a matrice
#' @export
#'
#' @examples
#'
TValueTable.UnivFactor <-function(object){
tab_vtest <- object$tableau
for (i in 1:object$nli){
for (j in 1:object$nco){
v = (sqrt(object$eff[object$nli+1,j]))*((object$pourc[i,j] - object$pourc[object$nli+1,j])/(sqrt(((object$eff[object$nli+1,object$nco+1]-object$eff[object$nli+1,j])/(object$eff[object$nli+1,object$nco+1] - 1))*object$pourc[object$nli+1,j]* (1-object$pourc[object$nli+1,j]))))
tab_vtest[i,j] <- v
}
}
print("ci dessous tableau des valeurs tests")
print(tab_vtest)
barplot(tab_vtest)
}
TValueTable.UnivFactor(obj)
#' TValueTable
#'
#' @param object a UnivFactor object
#'
#' @return a matrice
#' @export
#'
#' @examples
#'
TValueTable.UnivFactor <-function(object){
tab_vtest <- object$tableau
for (i in 1:object$nli){
for (j in 1:object$nco){
v = (sqrt(object$eff[object$nli+1,j]))*((object$pourc[i,j] - object$pourc[object$nli+1,j])/(sqrt(((object$eff[object$nli+1,object$nco+1]-object$eff[object$nli+1,j])/(object$eff[object$nli+1,object$nco+1] - 1))*object$pourc[object$nli+1,j]* (1-object$pourc[object$nli+1,j]))))
tab_vtest[i,j] <- v
}
}
print("ci dessous tableau des valeurs tests")
print(tab_vtest)
barplot(height=as.matrix(tab_vtest), main="Experiment-1", ylab="dosage", beside=TRUE,
col=rainbow(5))
}
TValueTable.UnivFactor(obj)
# CONVERT TO DATA FRAME
df <- transform(data.frame(tab_vtest), y=row.names(mat))
# CONVERT TO DATA FRAME
df <- transform(data.frame(obj$tableau), y=row.names(obj$tableau))
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(mat), times = colnames(mat),
timevar="x", v.names="value", direction="long")
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(obj$tableau), times = colnames(obj$tableau),
timevar="x", v.names="value", direction="long")
n <- 5 # no of rows
p <- 5 # no of columns
# Create matrix of values
mat <- matrix(runif(n*p, 0, 1), nrow=n) # create matrix
colnames(mat) <- paste0("x", 1:p)  # column names
rownames(mat) <- paste0("x", 1:nrow(mat)) # row names
diag(mat) <- 0 # set diagonals to 0
mat <- (mat+t(mat))/2  # make matrix symmetrical
mat
# CONVERT TO DATA FRAME
df <- transform(data.frame(mat), y=row.names(mat))
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(obj$tableau), times = colnames(obj$tableau),
timevar="x", v.names="value", direction="long")
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(mat), times = colnames(mat),
timevar="x", v.names="value", direction="long")
# ORDER VALUES
long_df <- with(long_df, long_df[order(value),])
long_df$xy <- with(long_df, paste(x, y, sep=":"))
# CONVERT TO MATRIX
new_mat <- matrix(long_df$value, dimnames=list(long_df$xy, "value"))
new_mat
# BASE R barplot:
barplot(new_mat, beside = TRUE, horiz = TRUE,
main = "Horizontal Bar Graph Descending Order",
names.arg = row.names(new_mat),
las=1, col = rainbow(nrow(new_mat)))
# CONVERT TO DATA FRAME
df <- transform(data.frame(obj$tableau), y=row.names(obj$tableau))
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(mat), times = colnames(mat),
timevar="x", v.names="value", direction="long")
print(df)
d1f <- transform(data.frame(mat), y=row.names(mat))
d1f
print(d1f)
obj$tableau
tab = as.matrix(obj$tableau)
# CONVERT TO DATA FRAME
df <- transform(data.frame(tab), y=row.names(tab))
print(df)
tab = as.matrix(obj$tableau)
print(tab)
# CONVERT TO DATA FRAME
df <- transform(data.frame(tab))
print(df)
# CONVERT TO DATA FRAME
df <- data.frame(tab)
print(df)
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(mat), times = colnames(mat),
timevar="x", v.names="value", direction="long")
typeof(tab)
tab <- as.matrix(obj$tableau)
typeof(tab)
typeof(mat)
# CONVERT TO DATA FRAME
df <- as.data.frame(tab)
print(df)
# CONVERT TO DATA FRAME
df <- as.data.frame(t(tab))
print(df)
tab <- as.matrix(obj$tableau)
# CONVERT TO DATA FRAME
df <- as.data.frame.matrix(tab)
print(df)
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(mat), times = colnames(mat),
timevar="x", v.names="value", direction="long")
# ORDER VALUES
long_df <- with(long_df, long_df[order(value),])
long_df$xy <- with(long_df, paste(x, y, sep=":"))
# CONVERT TO MATRIX
new_mat <- matrix(long_df$value, dimnames=list(long_df$xy, "value"))
new_mat
# BASE R barplot:
barplot(new_mat, beside = TRUE, horiz = TRUE,
main = "Horizontal Bar Graph Descending Order",
names.arg = row.names(new_mat),
las=1, col = rainbow(nrow(new_mat)))
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(tab), times = colnames(tab),
timevar="x", v.names="value", direction="long")
# ORDER VALUES
long_df <- with(long_df, long_df[order(value),])
long_df$xy <- with(long_df, paste(x, y, sep=":"))
# CONVERT TO MATRIX
new_mat <- matrix(long_df$value, dimnames=list(long_df$xy, "value"))
# CONVERT TO MATRIX
new_mat <- matrix(long_df$value, dimnames=list(long_df$xy, "value"))
new_mat
# BASE R barplot:
barplot(new_mat, beside = TRUE, horiz = TRUE,
main = "Horizontal Bar Graph Descending Order",
names.arg = row.names(new_mat),
las=1, col = rainbow(nrow(new_mat)))
tab <- as.matrix(obj$tableau)
typeof(tab)
# CONVERT TO DATA FRAME
df <- as.data.frame.matrix(tab)
print(df)
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(tab), times = colnames(tab),
timevar="x", v.names="value", direction="long")
# ORDER VALUES
long_df <- with(long_df, long_df[order(value),])
long_df$xy <- with(long_df, paste(x, y, sep=":"))
tab <- as.matrix(obj$tableau)
typeof(tab)
tab <- as.data.frame.matrix(obj$tableau)
# CONVERT TO DATA FRAME
df <- transform(data.frame(tab), y=row.names(tab))
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(mat), times = colnames(mat),
timevar="x", v.names="value", direction="long")
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(tab), times = colnames(tab),
timevar="x", v.names="value", direction="long")
# ORDER VALUES
long_df <- with(long_df, long_df[order(value),])
long_df$xy <- with(long_df, paste(x, y, sep=":"))
# CONVERT TO MATRIX
new_mat <- matrix(long_df$value, dimnames=list(long_df$xy, "value"))
new_mat
# BASE R barplot:
barplot(new_mat, beside = TRUE, horiz = TRUE,
main = "Horizontal Bar Graph Descending Order",
names.arg = row.names(new_mat),
las=1, col = rainbow(nrow(new_mat)))
#' TValueTable
#'
#' @param object a UnivFactor object
#'
#' @return a matrice
#' @export
#'
#' @examples
#'
TValueTable.UnivFactor <-function(object){
tab_vtest <- object$tableau
for (i in 1:object$nli){
for (j in 1:object$nco){
v = (sqrt(object$eff[object$nli+1,j]))*((object$pourc[i,j] - object$pourc[object$nli+1,j])/(sqrt(((object$eff[object$nli+1,object$nco+1]-object$eff[object$nli+1,j])/(object$eff[object$nli+1,object$nco+1] - 1))*object$pourc[object$nli+1,j]* (1-object$pourc[object$nli+1,j]))))
tab_vtest[i,j] <- v
}
}
print("ci dessous tableau des valeurs tests")
print(tab_vtest)
tab <- as.data.frame.matrix(tab_vtest)
# CONVERT TO DATA FRAME
df <- transform(data.frame(tab), y=row.names(tab))
# RESHAPE LONG
long_df <- reshape(df, varying = colnames(tab), times = colnames(tab),
timevar="x", v.names="value", direction="long")
# ORDER VALUES
long_df <- with(long_df, long_df[order(value),])
long_df$xy <- with(long_df, paste(x, y, sep=":"))
# CONVERT TO MATRIX
new_mat <- matrix(long_df$value, dimnames=list(long_df$xy, "value"))
new_mat
# BASE R barplot:
barplot(new_mat, beside = TRUE, horiz = TRUE,
main = "Horizontal Bar Graph Descending Order",
names.arg = row.names(new_mat),
las=1, col = rainbow(nrow(new_mat)))
}
TValueTable.UnivFactor(obj)
obj$vargroupe
chisq.test(obj$tableau)
khi2 = chisq.test(obj$tableau)$statitic
khi2
khi2 = chisq.test(obj$tableau)$statistic
khi2
cramer = sqrt(khi2/lenght(obj$data)*(min(obj$nco,obj$nli)))
cramer = sqrt(khi2/length(obj$data)*(min(obj$nco,obj$nli)))
cramer
cramer = sqrt(khi2/length(obj$data)*(min((obj$nco-1),(obj$nli-1)))
cramer = sqrt(khi2/length(obj$data)*(min((obj$nco-1),(obj$nli-1))))
cramer
length(obj$data)
(obj$data)
cramer = sqrt((khi2)/nrow(obj$data)*(min((obj$nco-1),(obj$nli-1)))))
cramer
nrow(obj$data)
cramer = sqrt((khi2)/(nrow(obj$data)*(min((obj$nco-1),(obj$nli-1)))))
cramer
library(ClustCheck)
obj = ClustCheck::UnivConst(data = (read.csv("C:/Users/adrien/Documents/ClustCheck/data.csv", sep=";")), "Région","groupe")
VisualisationACM.UnivFactor(obj)
Vcramer(obj)
Vcramer.UnivFactor(obj)
#' Vcramer.UnivFactor
#'
#' @param object an UnivFator object
#'
#' @return
#' @export
#'
#' @examples
Vcramer.UnivFactor <- function(object){
khi2 = chisq.test(object$tableau)$statistic
khi2
cramer = sqrt((khi2)/(nrow(obj$data)*(min((object$nco-1),(object$nli-1)))))
cramer
}
Vcramer.UnivFactor(obj)
