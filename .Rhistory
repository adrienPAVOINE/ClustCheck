geom_col() +
coord_flip() +
facet_wrap(vars(clusters)) +
labs(title = "phi-values")
}
else {
cat("Phi values calculations are for categorical variables only.")
}
}
plotphi(obj, BankCustomer$profession)
library(ClustCheck)
ClustCheck::plotphi(obj,BankCustomer$profession)
ClustCheck::plottvalue(obj)
library(ClustCheck)
ClustCheck::plottvalue(obj)
#' Plot of t-values
#'
#' @param object An object of class ccdata
#' @param var A data vector of an active variable
#'
#' @return the plot of the
#'
#' @export
#' @import ggplot2
#' @examples
plottvalue <- function(object, var=NULL){
#if(object$vartype== "NUM"){
table <- tvalue_num(object)
p <- ncol(table)
variables <- rownames(table)
Tvalue_table <- stack(as.data.frame(table))
Tvalue_table$variables <- rep(variables,p)
# Visualisation
ggplot2::ggplot(Tvalue_table, ggplot2::aes(x=variables, y=values)) +
ggplot2::geom_col() +
ggplot2::geom_hline(yintercept = -2, linetype="dashed", size=0.5, color="red") +
ggplot2::geom_hline(yintercept = 2, linetype="dashed", size=0.5, color="red") +
ggplot2::coord_flip() +
ggplot2::facet_wrap(ggplot2::vars(ind)) +
ggplot2::labs(title = "t-values")
#}
#if(object$vartype== "CAT"){
if(is.null(var) ==FALSE){
if(is.character(var) == TRUE|is.factor(var) == TRUE){
table <- tvalue_cat(object, var)
m <- ncol(table)
levels <- colnames(table)
Tvalue_table <- as.data.frame(table)
Tvalue_table$Freq
colnames(Tvalue_table) <- c('clusters','levels','values')
# Visualisation
ggplot2::ggplot(Tvalue_table, ggplot2::aes(x=levels, y=values)) +
ggplot2::geom_col() +
ggplot2::coord_flip() +
ggplot2::facet_wrap(ggplot2::vars(clusters)) +
ggplot2::labs(title = "t-values")
}
}
}
library(ClustCheck)
ClustCheck::plottvalue(obj)
#' Plot of t-values
#'
#' @param object An object of class ccdata
#' @param var A data vector of an active variable
#'
#' @return the plot of the
#'
#' @export
#' @import ggplot2
#' @examples
plottvalue <- function(object, var = NULL) {
#if(object$vartype== "NUM"){
table <- tvalue_num(object)
p <- ncol(table)
variables <- rownames(table)
Tvalue_table <- stack(as.data.frame(table))
Tvalue_table$variables <- rep(variables, p)
print(Tvalue_table$variables)
# Visualisation
ggplot2::ggplot(Tvalue_table, ggplot2::aes(x = variables, y = values)) +
ggplot2::geom_col() +
ggplot2::geom_hline(
yintercept = -2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
ggplot2::geom_hline(
yintercept = 2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
ggplot2::coord_flip() +
ggplot2::facet_wrap(ggplot2::vars(ind)) +
ggplot2::labs(title = "t-values")
#}
#if(object$vartype== "CAT"){
if (is.null(var) == FALSE) {
if (is.character(var) == TRUE | is.factor(var) == TRUE) {
table <- tvalue_cat(object, var)
m <- ncol(table)
levels <- colnames(table)
Tvalue_table <- as.data.frame(table)
Tvalue_table$Freq
colnames(Tvalue_table) <- c('clusters', 'levels', 'values')
# Visualisation
ggplot2::ggplot(Tvalue_table, ggplot2::aes(x = levels, y = values)) +
ggplot2::geom_col() +
ggplot2::coord_flip() +
ggplot2::facet_wrap(ggplot2::vars(clusters)) +
ggplot2::labs(title = "t-values")
}
}
}
plottvalue(obj)
#' Plot of t-values
#'
#' @param object An object of class ccdata
#' @param var A data vector of an active variable
#'
#' @return the plot of the
#'
#' @export
#' @import ggplot2
#' @examples
plottvalue <- function(object, var = NULL) {
#if(object$vartype== "NUM"){
table <- tvalue_num(object)
p <- ncol(table)
print(p)
variables <- rownames(table)
Tvalue_table <- stack(as.data.frame(table))
Tvalue_table$variables <- rep(variables, p)
print(Tvalue_table$variables)
# Visualisation
ggplot2::ggplot(Tvalue_table, ggplot2::aes(x = variables, y = values)) +
ggplot2::geom_col() +
ggplot2::geom_hline(
yintercept = -2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
ggplot2::geom_hline(
yintercept = 2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
ggplot2::coord_flip() +
ggplot2::facet_wrap(ggplot2::vars(ind)) +
ggplot2::labs(title = "t-values")
#}
#if(object$vartype== "CAT"){
if (is.null(var) == FALSE) {
if (is.character(var) == TRUE | is.factor(var) == TRUE) {
table <- tvalue_cat(object, var)
m <- ncol(table)
levels <- colnames(table)
Tvalue_table <- as.data.frame(table)
Tvalue_table$Freq
colnames(Tvalue_table) <- c('clusters', 'levels', 'values')
# Visualisation
ggplot2::ggplot(Tvalue_table, ggplot2::aes(x = levels, y = values)) +
ggplot2::geom_col() +
ggplot2::coord_flip() +
ggplot2::facet_wrap(ggplot2::vars(clusters)) +
ggplot2::labs(title = "t-values")
}
}
}
plottvalue(obj)
#' Plot of t-values
#'
#' @param object An object of class ccdata
#' @param var A data vector of an active variable
#'
#' @return the plot of the
#'
#' @export
#' @import ggplot2
#' @examples
plottvalue <- function(object, var = NULL) {
#if(object$vartype== "NUM"){
table <- tvalue_num(object)
p <- ncol(table)
variables <- rownames(table)
Tvalue_table <- stack(as.data.frame(table))
print(Tvalue_table)
Tvalue_table$variables <- rep(variables, p)
print(Tvalue_table$variables)
# Visualisation
ggplot2::ggplot(Tvalue_table, ggplot2::aes(x = variables, y = values)) +
ggplot2::geom_col() +
ggplot2::geom_hline(
yintercept = -2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
ggplot2::geom_hline(
yintercept = 2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
ggplot2::coord_flip() +
ggplot2::facet_wrap(ggplot2::vars(ind)) +
ggplot2::labs(title = "t-values")
#}
#if(object$vartype== "CAT"){
if (is.null(var) == FALSE) {
if (is.character(var) == TRUE | is.factor(var) == TRUE) {
table <- tvalue_cat(object, var)
m <- ncol(table)
levels <- colnames(table)
Tvalue_table <- as.data.frame(table)
Tvalue_table$Freq
colnames(Tvalue_table) <- c('clusters', 'levels', 'values')
# Visualisation
ggplot2::ggplot(Tvalue_table, ggplot2::aes(x = levels, y = values)) +
ggplot2::geom_col() +
ggplot2::coord_flip() +
ggplot2::facet_wrap(ggplot2::vars(clusters)) +
ggplot2::labs(title = "t-values")
}
}
}
plottvalue(obj)
library(ClustCheck)
ClustCheck::plottvalue(obj)
table <- tvalue_num(obj)
p <- ncol(table)
variables <- rownames(table)
Tvalue_table <- stack(as.data.frame(table))
print(Tvalue_table)
Tvalue_table$variables <- rep(variables, p)
print(Tvalue_table$variables)
# Visualisation
ggplot2::ggplot(Tvalue_table, ggplot2::aes(x = variables, y = values)) +
ggplot2::geom_col() +
ggplot2::geom_hline(
yintercept = -2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
ggplot2::geom_hline(
yintercept = 2,
linetype = "dashed",
size = 0.5,
color = "red"
) +
ggplot2::coord_flip() +
ggplot2::facet_wrap(ggplot2::vars(ind)) +
ggplot2::labs(title = "t-values")
library(ClustCheck)
ClustCheck::plottvalue(obj)
library(ClustCheck)
ClustCheck::plottvalue(obj)
ClustCheck::plottvalue(obj, BankCustomer$profession)
library(ClustCheck)
ClustCheck::plotsizeeff(obj)
library(ClustCheck)
ClustCheck::plotsizeeff(obj)
obj$num_p
library(ClustCheck)
ClustCheck::plotsizeeff(obj)
library(ClustCheck)
ClustCheck::plotcorr(obj)
ClustCheck::plotVCramer(obj)
ClustCheck::plottvalue(obj)
ClustCheck::plottvalue(obj, BankCustomer$profession)
library(ClustCheck)
ClustCheck::plotVCramer(obj)
ClustCheck::plotphi(obj, BankCustomer$profession)
library(ClustCheck)
vizAFC(obj, BankCustomer$profession)
library(ClustCheck)
vizAFC(obj, BankCustomer$profession)
library(ClustCheck)
vizAFC(obj, BankCustomer$profession)
tableau <- table(obj$pred_clusters,BankCustomer$profession)
questionr::lprop(tableau, digits=1)
questionr::cprop(tableau, digits=2)
mydf <- as.data.frame(tableau)
plotbar <- ggplot2::ggplot(mydf, aes(fill=var, y=Freq, x=Var1)) + geom_bar(position="stack", stat="identity")
plotbar <- ggplot2::ggplot(mydf, ggplot2::aes(fill=var, y=Freq, x=Var1)) + ggplot2::geom_bar(position="stack", stat="identity")
#data$groupe = factor(data$groupe)
#ggplot2::ggplot(data = data) + geom_mosaic(aes(x = product(groupe, région), fill=groupe), na.rm=TRUE) +
# labs(x = "Is it rude recline? ", title='f(DoYouRecline | RudeToRecline) f(RudeToRecline)')
res.ca <- FactoMineR::CA(tableau, graph = FALSE)
biplot <- fviz_ca_biplot(res.ca, repel = TRUE)
biplot <- factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
library(ClustCheck)
vizAFC(obj, BankCustomer$profession)
tableau <- table(obj$pred_clusters,BankCustomer$profession)
questionr::lprop(tableau, digits=1)
questionr::cprop(tableau, digits=2)
mydf <- as.data.frame(tableau)
plotbar <- ggplot2::ggplot(mydf, aes(fill=var, y=Freq, x=Var1)) + geom_bar(position="stack", stat="identity")
plotbar <- ggplot2::ggplot(mydf, ggplot2::aes(fill=var, y=Freq, x=Var1)) + ggplot2::geom_bar(position="stack", stat="identity")
#data$groupe = factor(data$groupe)
#ggplot2::ggplot(data = data) + geom_mosaic(aes(x = product(groupe, région), fill=groupe), na.rm=TRUE) +
# labs(x = "Is it rude recline? ", title='f(DoYouRecline | RudeToRecline) f(RudeToRecline)')
res.ca <- FactoMineR::CA(tableau, graph = FALSE)
biplot <- factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
plt <- ggpubr::ggarrange(plotbar, biplot,labels = c('b', 'a'), widths = c(1,2),ncol = 2, nrow = 1)
biplot <- factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
plt <- ggpubr::ggarrange(plotbar, biplot,labels = c('b', 'a'), widths = c(1,2),ncol = 2, nrow = 1)
biplot
ClustCheck::get_MCA(obj)
ClustCheck::vizAFC(obj, BankCustomer$^profession)
ClustCheck::vizAFC(obj, BankCustomer$profession)
ClustCheck::vizAFC(obj, BankCustomer$carte_bleue)
tableau <- table(obj$pred_clusters,BankCustomer$carte_bleue)
questionr::lprop(tableau, digits=1)
questionr::cprop(tableau, digits=2)
mydf <- as.data.frame(tableau)
plotbar <- ggplot2::ggplot(mydf, ggplot2::aes(fill=var, y=Freq, x=Var1)) + ggplot2::geom_bar(position="stack", stat="identity")
#data$groupe = factor(data$groupe)
#ggplot2::ggplot(data = data) + geom_mosaic(aes(x = product(groupe, région), fill=groupe), na.rm=TRUE) +
# labs(x = "Is it rude recline? ", title='f(DoYouRecline | RudeToRecline) f(RudeToRecline)')
res.ca <- FactoMineR::CA(tableau, graph = FALSE)
biplot <- factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
#data$groupe = factor(data$groupe)
#ggplot2::ggplot(data = data) + geom_mosaic(aes(x = product(groupe, région), fill=groupe), na.rm=TRUE) +
# labs(x = "Is it rude recline? ", title='f(DoYouRecline | RudeToRecline) f(RudeToRecline)')
res.ca <- FactoMineR::CA(tableau,ncp=2, graph = FALSE)
biplot <- factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
plt <- ggpubr::ggarrange(plotbar, biplot,labels = c('b', 'a'), widths = c(1,2),ncol = 2, nrow = 1)
biplot <- factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
#data$groupe = factor(data$groupe)
#ggplot2::ggplot(data = data) + geom_mosaic(aes(x = product(groupe, région), fill=groupe), na.rm=TRUE) +
# labs(x = "Is it rude recline? ", title='f(DoYouRecline | RudeToRecline) f(RudeToRecline)')
res.ca <- FactoMineR::CA(tableau, graph = FALSE)
biplot <- factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
biplot <- factoextra::fviz_ca_biplot(res.ca)
library(ClustCheck)
ClustCheck::vizAFC(obj,BankCustomer$profession)
ClustCheck::vizAFC(obj,BankCustomer$carte_bleue)
unique(BankCustomer$carte_bleue)
length(unique(BankCustomer$carte_bleue))
#' @import dplyr
#' @importFrom graphics  barplot mosaicplot
#' @importFrom stats addmargins chisq.test
#' @importFrom utils data stack
#' @importFrom graphics boxplot
#' @import ggpubr
#' @examples
#' data(BankCustomer)
#' obj <- Dataset(BankCustomer, BankCustomer$Cluster)
#' vizAFC(obj, BankCustomer$profession)
vizAFC <- function(object, var) {
if (length(unique(var)) > 2) {
tableau <- table(object$pred_clusters, var)
questionr::lprop(tableau, digits = 1)
questionr::cprop(tableau, digits = 2)
mydf <- as.data.frame(tableau)
plotbar <-
ggplot2::ggplot(mydf, aes(fill = var, y = Freq, x = Var1)) + geom_bar(position =
"stack", stat = "identity")
#data$groupe = factor(data$groupe)
#ggplot2::ggplot(data = data) + geom_mosaic(aes(x = product(groupe, région), fill=groupe), na.rm=TRUE) +
# labs(x = "Is it rude recline? ", title='f(DoYouRecline | RudeToRecline) f(RudeToRecline)')
res.ca <- FactoMineR::CA(tableau, graph = FALSE)
biplot <- factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
plt <-
ggpubr::ggarrange(
plotbar,
biplot,
labels = c('b', 'a'),
widths = c(1, 2),
ncol = 2,
nrow = 1
)
print(plt)
} else{
plotbar <-
ggplot2::ggplot(mydf, aes(fill = var, y = Freq, x = Var1)) + geom_bar(position =
"stack", stat = "identity")
print(plotbar)
}
}
vizAFC(obj, BankCustomer$carte_bleue)
library(ClustCheck)
ClustCheck::vizAFC(obj,BankCustomer$carte_bleue)
ClustCheck::vizAFC(obj,BankCustomer$profession)
ClustCheck::vizAFC(obj,BankCustomer$pea)
tableau <- table(obj$pred_clusters, BankCustomer$pea)
questionr::lprop(tableau, digits = 1)
questionr::cprop(tableau, digits = 2)
mydf <- as.data.frame(tableau)
plotbar <-
ggplot2::ggplot(mydf, aes(fill = var, y = Freq, x = Var1)) + geom_bar(position =
"stack", stat = "identity")
res.ca <- FactoMineR::CA(tableau, graph = FALSE)
biplot <- factoextra::fviz_ca_biplot(res.ca, repel = TRUE)
obj$num_data
varquali <- ade4::acm.disjonctif(subset(obj$active_data,select=object$cat_ind))
varquali <- ade4::acm.disjonctif(subset(obj$active_data,select=obj$cat_ind))
data <- cbind(obj$num_data,varquali.pond)
data <- cbind(obj$num_data,varquali)
data
ClustCheck::silhouette(obj)
#' transformdata
#'
#' @param object an object of class ccdata
#'
#' @return
#' @export
#' @import FactoMineR
#' @import factoextra
#'
#' @examples
transformdata <- function(object){
if(object$vartype=="NUM"){
stop("The variables are numerical and don't need factorial transformation")
}
# #library(ade4)
varquali <- ade4::acm.disjonctif(subset(object$active_data,select=object$cat_ind))
# #fonction pour pondération des indicatrices
PF <- function(x){
m <- mean(x)
return(x/sqrt(m))
}
# #appliquer la pondération sur les indicatrices
varquali.pond <- data.frame(lapply(varquali,PF))
# #données transformées envoyées ?l'ACP
data. <- cbind(object$num_data,varquali.pond)
return(as.data.frame(data))
}
#' silhouette
#'
#' @param object an object of class ccdata
#' @param clusters a vector corresponding to the dataset clustering results
#'
#' @return
#' @export
#'
#' @examples
silhouette <- function(object, clusters=object$pred_clusters) {
if(object$vartype!= "NUM"){
data <- transformdata(object)
}else{
data <- object$active_data
}
# a: The mean distance between a sample and all other points in the same class.
# b: The mean distance between a sample and all other points in the next nearest cluster.
# if (nrow(object)!=length(clusters)){
#   stop("Feature data and cluster data don't have the same length")
# }
d <- as.matrix(dist(data))
n <- ncol(d)
a <- NULL; b <- NULL
for (col in 1:n){
cluster <- clusters[col]
# calculation for a
same_class <- which(clusters==cluster) # identification of the class samples
same_class_wo_sample <- same_class[which(same_class!=col)] # we remove the sample here
a <- c(a,mean(d[same_class_wo_sample,col]))
# calculation for b
all_different_class <- which(clusters!=cluster) # identification of all the other samples
w <- as.integer(names(which.min(d[all_different_class,col]))) # identification of the closest sample in an other sample
nearest_cluster <- clusters[w] # identification of the next nearest cluster
different_class <- which(clusters==nearest_cluster)
b <- c(b,mean(d[different_class,col]))
}
s <- (b - a)/pmax(a,b) # silhouette formula
# Cluster silhouette
sk <- NULL
for (k in unique(clusters)){
ind = which(clusters == k)
nbk <- sum(clusters == k)
#sk <- 1/nbk * (sum(s[ind]))
#cat("Silhouette for cluster" , k )
sk <- c(sk, 1/nbk * (sum(s[ind])))
}
return(list(cluster_silhouette=sk, mean_silhouette=mean(s)))
}
silhouette(obj)
ClustCheck::davies_bouldin(obj)
ClustCheck::dunn_index(obj)
ClustCheck::validation(obj)
library(ClustCheck)
library(ClustCheck)
ClustCheck::validation(obj)
ClustCheck::validation(obj, BankCustomer$Cluster)
ClustCheck::statistical_test(obj, "profession")
obj$all_data[["profession"]]
ClustCheck::statistical_test(obj, "profession")
library(ClustCheck)
ClustCheck::statistical_test(obj, "profession")
table(obj$pred_clusters, obj$all_data[["profession"]])
library(ClustCheck)
ClustCheck::statistical_test(obj, "profession")
ClustCheck::validation(obj,BankCustomer$Cluster)
help("data")
help("BankCustomer")
ClustCheck::BankCustomer
data <- ClustCheck::BankCustomer
data
library(ClustCheck)
ClustCheck::vizAFC(obj, BankCustomer$profession)
help(ClustCheck)
??ClustCheck
library(ClustCheck)
help(ClustCjeck)
help(ClustCheck::contingency)
help(contingency)
